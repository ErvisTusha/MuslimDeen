diff --git a/.gitignore b/.gitignore
index 39262f8..9a3568b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,4 +6,5 @@
 # Documentation
 muslim_deen/WIDGET_IMPLEMENTATION.md
 muslim_deen/test_notification_persistence.md
-*.md
\ No newline at end of file
+*.md
+audit/
\ No newline at end of file
diff --git a/muslim_deen/lib/services/accessibility_service.dart b/muslim_deen/lib/services/accessibility_service.dart
index d92996f..f185f3c 100644
--- a/muslim_deen/lib/services/accessibility_service.dart
+++ b/muslim_deen/lib/services/accessibility_service.dart
@@ -2,6 +2,14 @@ import 'package:flutter/material.dart';
 import 'package:flutter_tts/flutter_tts.dart';
 import 'package:speech_to_text/speech_to_text.dart';
 import 'package:flutter/services.dart';
+import 'package:muslim_deen/service_locator.dart';
+import 'package:muslim_deen/services/navigation_service.dart';
+import 'package:muslim_deen/services/logger_service.dart';
+import 'package:muslim_deen/views/home_view.dart';
+import 'package:muslim_deen/views/qibla_view.dart';
+import 'package:muslim_deen/views/tesbih_view.dart';
+import 'package:muslim_deen/views/mosque_view.dart';
+import 'package:muslim_deen/views/settings_view.dart';
 
 /// Enhanced accessibility service for MuslimDeen app
 /// Provides screen reader support, voice commands, and cognitive assistance
@@ -229,47 +237,132 @@ class AccessibilityService {
     switch (command.action) {
       case NavigationAction.prayer:
         speak('Opening prayer screen');
-        // TODO: Navigate to prayer screen
+        _navigateTo(const HomeView(), routeName: 'HomeView');
         break;
       case NavigationAction.qibla:
         speak('Opening Qibla direction');
-        // TODO: Navigate to Qibla screen
+        _navigateTo(const QiblaView(), routeName: 'QiblaView');
         break;
       case NavigationAction.tasbih:
         speak('Opening Tasbih counter');
-        // TODO: Navigate to Tasbih screen
+        _navigateTo(const TesbihView(), routeName: 'TesbihView');
         break;
       case NavigationAction.mosque:
         speak('Finding nearby mosques');
-        // TODO: Navigate to mosque screen
+        _navigateTo(const MosqueView(), routeName: 'MosqueView');
         break;
       case NavigationAction.settings:
         speak('Opening settings');
-        // TODO: Navigate to settings screen
+        // Navigate to settings and attempt to surface notification section
+        _navigateTo(const SettingsView(scrollToNotifications: true), routeName: 'SettingsView');
         break;
       case NavigationAction.back:
         speak('Going back');
-        // TODO: Navigate back
+        _goBack();
         break;
       case NavigationAction.scrollDown:
         speak('Scrolling down');
-        // TODO: Scroll down
+        _scrollBy(300.0);
         break;
       case NavigationAction.scrollUp:
         speak('Scrolling up');
-        // TODO: Scroll up
+        _scrollBy(-300.0);
         break;
       case NavigationAction.nextPage:
         speak('Next page');
-        // TODO: Go to next page
+        _pageTurn(forward: true);
         break;
       case NavigationAction.previousPage:
         speak('Previous page');
-        // TODO: Go to previous page
+        _pageTurn(forward: false);
         break;
     }
   }
 
+  /// Internal helper: navigate using NavigationService
+  void _navigateTo(Widget page, {String? routeName}) {
+    try {
+  final nav = locator<NavigationService>();
+  nav.navigateTo<dynamic>(page, routeName: routeName);
+    } catch (e, s) {
+      try {
+        locator<LoggerService>().error('Accessibility navigation failed', error: e, stackTrace: s);
+      } catch (_) {}
+      speak('Navigation failed.');
+    }
+  }
+
+  void _goBack() {
+    try {
+  final nav = locator<NavigationService>();
+  nav.goBack<dynamic>();
+    } catch (e, s) {
+      try {
+        locator<LoggerService>().warning('Accessibility goBack failed', error: e, stackTrace: s);
+      } catch (_) {}
+      speak('Cannot go back.');
+    }
+  }
+
+  /// Scrolls the primary scrollable by [offset] pixels. Positive = down, Negative = up.
+  void _scrollBy(double offset) {
+    try {
+      final context = locator<NavigationService>().navigatorKey.currentContext;
+      if (context == null) {
+        speak('Unable to scroll: no active screen.');
+        return;
+      }
+
+      final ScrollController? controller = PrimaryScrollController.of(context);
+      if (controller != null && controller.hasClients) {
+        final target = (controller.offset + offset).clamp(controller.position.minScrollExtent, controller.position.maxScrollExtent);
+        controller.animateTo(
+          target,
+          duration: const Duration(milliseconds: 400),
+          curve: Curves.easeInOut,
+        );
+        return;
+      }
+
+      // Fallback: try to scroll the nearest Scrollable state
+      final scrollableState = Scrollable.of(context);
+      final pos = scrollableState.position;
+      final target = (pos.pixels + offset).clamp(pos.minScrollExtent, pos.maxScrollExtent);
+      pos.animateTo(target, duration: const Duration(milliseconds: 400), curve: Curves.easeInOut);
+      return;
+    } catch (e, s) {
+      try {
+        locator<LoggerService>().error('Accessibility scroll failed', error: e, stackTrace: s);
+      } catch (_) {}
+      speak('Scrolling failed.');
+    }
+  }
+
+  /// Emulate a page turn by scrolling by the viewport height. If [forward] is true, go to next page.
+  void _pageTurn({required bool forward}) {
+    try {
+      final context = locator<NavigationService>().navigatorKey.currentContext;
+      if (context == null) {
+        speak('No active screen to change pages.');
+        return;
+      }
+
+      final media = MediaQuery.of(context);
+      if (media.size.height == 0) {
+        speak('Cannot determine page size.');
+        return;
+      }
+
+      final double pageOffset = media.size.height * 0.9 * (forward ? 1 : -1);
+      _scrollBy(pageOffset);
+    } catch (e, s) {
+      try {
+        locator<LoggerService>().warning('Accessibility page turn failed', error: e, stackTrace: s);
+      } catch (_) {}
+      speak('Page turn failed.');
+    }
+  }
+
   /// Format time for speech
   String _formatTimeForSpeech(DateTime time) {
     final hour = time.hour;
diff --git a/muslim_deen/lib/views/home_view.dart b/muslim_deen/lib/views/home_view.dart
index c598c44..c78f018 100644
--- a/muslim_deen/lib/views/home_view.dart
+++ b/muslim_deen/lib/views/home_view.dart
@@ -1014,15 +1014,25 @@ class _HomeViewState extends ConsumerState<HomeView>
         title: "Prayer Times",
         brightness: brightness,
         actions: [
-          IconButton(
-            icon: const Icon(Icons.brightness_2),
-            onPressed: _navigateToMoonPhases,
-            tooltip: 'Moon Phase Details',
+          Semantics(
+            button: true,
+            label: 'Moon Phase Details',
+            hint: 'View moon phase details and lunar calendar information',
+            child: IconButton(
+              icon: const Icon(Icons.brightness_2),
+              onPressed: _navigateToMoonPhases,
+              tooltip: 'Moon Phase Details',
+            ),
           ),
-          IconButton(
-            icon: const Icon(Icons.bar_chart),
-            onPressed: _navigateToPrayerStats,
-            tooltip: 'Prayer Statistics',
+          Semantics(
+            button: true,
+            label: 'Prayer Statistics',
+            hint: 'View prayer completion statistics and history',
+            child: IconButton(
+              icon: const Icon(Icons.bar_chart),
+              onPressed: _navigateToPrayerStats,
+              tooltip: 'Prayer Statistics',
+            ),
           ),
         ],
       ),
@@ -1122,12 +1132,15 @@ class _HomeViewState extends ConsumerState<HomeView>
 
     return Column(
       children: [
-        _buildLocationAndDateSection(
-          formattedGregorian,
-          formattedHijri,
-          displayCity,
-          displayCountry,
-          colors,
+        Padding(
+          padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
+          child: _buildLocationAndDateContent(
+            formattedGregorian,
+            formattedHijri,
+            displayCity,
+            displayCountry,
+            colors,
+          ),
         ),
         const RamadanCountdownBanner(),
         if (_isRamadan())
@@ -1155,67 +1168,64 @@ class _HomeViewState extends ConsumerState<HomeView>
     );
   }
 
-  Widget _buildLocationAndDateSection(
+  Widget _buildLocationAndDateContent(
     String formattedGregorian,
     String formattedHijri,
     String? displayCity,
     String? displayCountry,
     UIColors colors,
   ) {
-    return Padding(
-      padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
-      child: Row(
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          GestureDetector(
-            onDoubleTap: () => _navigateToSettings(scrollToDate: true),
+    return Row(
+      crossAxisAlignment: CrossAxisAlignment.start,
+      children: [
+        GestureDetector(
+          onDoubleTap: () => _navigateToSettings(scrollToDate: true),
+          child: Column(
+            crossAxisAlignment: CrossAxisAlignment.start,
+            children: [
+              Text(
+                formattedGregorian,
+                style: AppTextStyles.date(
+                  colors.brightness,
+                ).copyWith(fontSize: 15),
+              ),
+              Text(
+                formattedHijri,
+                style: AppTextStyles.dateSecondary(
+                  colors.brightness,
+                ).copyWith(fontSize: 13),
+              ),
+            ],
+          ),
+        ),
+        const Spacer(),
+        Flexible(
+          child: GestureDetector(
+            onDoubleTap: () => _navigateToSettings(scrollToLocation: true),
             child: Column(
-              crossAxisAlignment: CrossAxisAlignment.start,
+              crossAxisAlignment: CrossAxisAlignment.end,
               children: [
-                Text(
-                  formattedGregorian,
-                  style: AppTextStyles.date(
-                    colors.brightness,
-                  ).copyWith(fontSize: 15),
-                ),
-                Text(
-                  formattedHijri,
-                  style: AppTextStyles.dateSecondary(
-                    colors.brightness,
-                  ).copyWith(fontSize: 13),
-                ),
+                if (displayCity?.isNotEmpty == true)
+                  Text(
+                    displayCity!,
+                    style: AppTextStyles.locationCity(colors.brightness),
+                    textAlign: TextAlign.end,
+                    overflow: TextOverflow.ellipsis,
+                    maxLines: 2,
+                  ),
+                if (displayCountry?.isNotEmpty == true)
+                  Text(
+                    displayCountry!,
+                    style: AppTextStyles.locationCountry(colors.brightness),
+                    textAlign: TextAlign.end,
+                    overflow: TextOverflow.ellipsis,
+                    maxLines: 1,
+                  ),
               ],
             ),
           ),
-          const Spacer(),
-          Flexible(
-            child: GestureDetector(
-              onDoubleTap: () => _navigateToSettings(scrollToLocation: true),
-              child: Column(
-                crossAxisAlignment: CrossAxisAlignment.end,
-                children: [
-                  if (displayCity?.isNotEmpty == true)
-                    Text(
-                      displayCity!,
-                      style: AppTextStyles.locationCity(colors.brightness),
-                      textAlign: TextAlign.end,
-                      overflow: TextOverflow.ellipsis,
-                      maxLines: 2,
-                    ),
-                  if (displayCountry?.isNotEmpty == true)
-                    Text(
-                      displayCountry!,
-                      style: AppTextStyles.locationCountry(colors.brightness),
-                      textAlign: TextAlign.end,
-                      overflow: TextOverflow.ellipsis,
-                      maxLines: 1,
-                    ),
-                ],
-              ),
-            ),
-          ),
-        ],
-      ),
+        ),
+      ],
     );
   }
 
diff --git a/muslim_deen/lib/views/islamic_calendar_view.dart b/muslim_deen/lib/views/islamic_calendar_view.dart
index 9aae045..3e4ac83 100644
--- a/muslim_deen/lib/views/islamic_calendar_view.dart
+++ b/muslim_deen/lib/views/islamic_calendar_view.dart
@@ -90,11 +90,14 @@ class _IslamicCalendarViewState extends ConsumerState<IslamicCalendarView> {
       );
       setState(() => _moonPhases = moonPhases);
     } catch (e) {
-      // Handle error silently for now
-      setState(() {
-        _monthlyEvents = [];
-        _filteredEvents = [];
-      });
+      // Handle error by showing a message to the user
+      if (mounted) {
+        setState(() {
+          _errorMessage = "Failed to load monthly data. Please try again.";
+          _monthlyEvents = [];
+          _filteredEvents = [];
+        });
+      }
     }
   }
 
@@ -193,21 +196,12 @@ class _IslamicCalendarViewState extends ConsumerState<IslamicCalendarView> {
           'tags': event.tags,
         }).toList();
       } else {
-        // Filter by type/category
-        final events = await _eventsService.getEventsForMonth(_selectedDate.year, _selectedDate.month);
-        filteredEvents = events
+        // Filter by type/category from the already loaded monthly events
+        filteredEvents = _monthlyEvents
             .where((event) =>
-                (_selectedEventType == null || event.type == _selectedEventType) &&
-                (_selectedEventCategory == null || event.category == _selectedEventCategory))
-            .map((event) => {
-          'date': event.gregorianDate?.toIso8601String() ?? event.getGregorianDateForYear(_selectedDate.year).toIso8601String(),
-          'name': event.title,
-          'type': event.type.name,
-          'category': event.category.name,
-          'description': event.description,
-          'significance': event.significance,
-          'tags': event.tags,
-        }).toList();
+                (_selectedEventType == null || event['type'] == _selectedEventType!.name) &&
+                (_selectedEventCategory == null || event['category'] == _selectedEventCategory!.name))
+            .toList();
       }
 
       setState(() => _filteredEvents = filteredEvents);
diff --git a/muslim_deen/lib/widgets/optimized_prayer_list_item.dart b/muslim_deen/lib/widgets/optimized_prayer_list_item.dart
index 24a3796..da4660b 100644
--- a/muslim_deen/lib/widgets/optimized_prayer_list_item.dart
+++ b/muslim_deen/lib/widgets/optimized_prayer_list_item.dart
@@ -252,7 +252,7 @@ class _OptimizedPrayerListItemState
           splashColor: splashColors.splash,
           highlightColor: splashColors.highlight,
           child: Container(
-            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
+            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
             decoration: BoxDecoration(
               color: itemColors.background,
               border: const Border(top: BorderSide(color: Colors.transparent)),
@@ -322,15 +322,24 @@ class _OptimizedPrayerListItemState
                         ),
                       ),
                     )
-                    : Checkbox(
-                      key: ValueKey('checkbox_$_prayerKey'),
-                      value: _isCompleted,
-                      onChanged:
-                          (_isCompleted || _hasPrayerPassed())
-                              ? (bool? value) => _toggleCompletionStatus()
-                              : null,
-                      activeColor: itemColors.icon,
-                      checkColor: itemColors.background,
+                    : Semantics(
+                      button: true,
+                      label: _isCompleted
+                          ? 'Mark ${widget.prayerInfo.name} as incomplete'
+                          : 'Mark ${widget.prayerInfo.name} as completed',
+                      hint: _hasPrayerPassed() || _isCompleted
+                          ? 'Double tap to toggle prayer completion status'
+                          : 'This prayer time has not arrived yet',
+                      child: Checkbox(
+                        key: ValueKey('checkbox_$_prayerKey'),
+                        value: _isCompleted,
+                        onChanged:
+                            (_isCompleted || _hasPrayerPassed())
+                                ? (bool? value) => _toggleCompletionStatus()
+                                : null,
+                        activeColor: itemColors.icon,
+                        checkColor: itemColors.background,
+                      ),
                     ),
               ],
             ),
diff --git a/muslim_deen/lib/widgets/prayer_list_item.dart b/muslim_deen/lib/widgets/prayer_list_item.dart
index 872ed61..b3d5946 100644
--- a/muslim_deen/lib/widgets/prayer_list_item.dart
+++ b/muslim_deen/lib/widgets/prayer_list_item.dart
@@ -129,7 +129,7 @@ class _PrayerListItemState extends ConsumerState<PrayerListItem> {
         splashColor: splashColors.splash,
         highlightColor: splashColors.highlight,
         child: Container(
-          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
+          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
           decoration: BoxDecoration(
             color: itemColors.background,
             border: const Border(top: BorderSide(color: Colors.transparent)),
@@ -183,14 +183,23 @@ class _PrayerListItemState extends ConsumerState<PrayerListItem> {
                       ),
                     ),
                   )
-                  : Checkbox(
-                    value: _isCompleted,
-                    onChanged:
-                        (_isCompleted || _hasPrayerPassed())
-                            ? (bool? value) => _toggleCompletion()
-                            : null, // Disable checkbox for upcoming prayers
-                    activeColor: itemColors.icon,
-                    checkColor: itemColors.background,
+                  : Semantics(
+                    button: true,
+                    label: _isCompleted
+                        ? 'Mark ${widget.prayerInfo.name} as incomplete'
+                        : 'Mark ${widget.prayerInfo.name} as completed',
+                    hint: _hasPrayerPassed() || _isCompleted
+                        ? 'Double tap to toggle prayer completion status'
+                        : 'This prayer time has not arrived yet',
+                    child: Checkbox(
+                      value: _isCompleted,
+                      onChanged:
+                          (_isCompleted || _hasPrayerPassed())
+                              ? (bool? value) => _toggleCompletion()
+                              : null, // Disable checkbox for upcoming prayers
+                      activeColor: itemColors.icon,
+                      checkColor: itemColors.background,
+                    ),
                   ),
             ],
           ),
diff --git a/muslim_deen/lib/widgets/prayer_times_section.dart b/muslim_deen/lib/widgets/prayer_times_section.dart
index 9910fbe..b3b80aa 100644
--- a/muslim_deen/lib/widgets/prayer_times_section.dart
+++ b/muslim_deen/lib/widgets/prayer_times_section.dart
@@ -47,11 +47,14 @@ class PrayerTimesSection extends StatelessWidget {
             padding: const EdgeInsets.fromLTRB(16, 12, 16, 4),
             child: Align(
               alignment: Alignment.centerLeft,
-              child: Text(
-                "Prayer Times",
-                style: AppTextStyles.sectionTitle(
-                  colors.brightness,
-                ).copyWith(color: colors.textColorPrimary),
+              child: Semantics(
+                header: true,
+                child: Text(
+                  "Prayer Times",
+                  style: AppTextStyles.sectionTitle(
+                    colors.brightness,
+                  ).copyWith(color: colors.textColorPrimary),
+                ),
               ),
             ),
           ),
